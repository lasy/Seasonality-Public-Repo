trend = 25*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
# generating 3 years of data
time = seq(0,3, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 25*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
# generating 3 years of data
time = seq(0,3, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 25*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
max(time)
2*max(time)-1
detrended_signal = smooth.spline(signal, df = 2*max(time)-1)
detrended_signal$y
plot(detrended_signal$yin)
plot(detrended_signal$y, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
time %% 1
plot(time %% 1)
time %/% 1
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_year = time %%1, signal = detrended_signal)
detrended_signal = smooth.spline(signal, df = 2*max(time)-1)$y
df = data.frame(time = time, day_of_year = time %%1, signal = detrended_signal)
head(df)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
title = ""
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
plot = TRUE
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
is_seasonal
plot(detrended_signal)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
detrended_signal = signal - smooth.spline(signal, df = 2*max(time)-1)$y
plot(detrended_signal, type = "")
plot(detrended_signal, type = "l")
detrended_signal = signal - smooth.spline(signal, df = 2*max(time)-1)$y
detrended_signal
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
is_seasonal
df = data.frame(time = time, day_of_year = time %%1, signal = detrended_signal)
mod = gamm(signal ~ s(day_of_year, bs='cc') , data = df, method = "REML")
mod
time = seq(0,3 - 1/365, by = 1/365)
length(time)
length(time)/3
time = seq(0,3 - 1/365, by = 1/365)
predict(mod, data = df[df$time<1,]
)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_trend = predict.gam(mod$gam, data = df[df$time<1,])
seasonal_trend
plot(seasonal_trend)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_trend = predict.gam(mod$gam)
time[which.max(seasonal_trend)]
mean(seasonal_trend)
min(seasonal_trend)
max(seasonal_trend)
(max(seasonal_trend) - min(seasonal_trend))/mean(seasonal_trend)
max(seasonal_trend) - min(seasonal_trend)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 25*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 25*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 3*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
plot(stl(signal_ts, s.window = "periodic"))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
plot(stl(signal_ts, s.window = "periodic"))
plot(stl(signal_ts, s.window = "periodic")$time_series[,2])
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal$time.series[,2],type = "l")
points(seasonal_analysis$time_series$trend, type= "l")
plot(stl_signal$time.series[,2],type = "l")
points(seasonal_analysis$time_series$trend, type= "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(stl_signal$time.series[,2],type = "l")
points(seasonal_analysis$time_series$trend, type= "l")
unique(seasonal_analysis$time_series$trend)
range(stl_signal$time.series[,2])
range(seasonal_analysis$time_series$trend)
plot(time, stl_signal$time.series[,2],type = "l")
points(time, seasonal_analysis$time_series$trend, type= "l")
plot(time, stl_signal$time.series[,2],type = "l")
points(time, seasonal_analysis$time_series$trend, type= "l", col = "green3")
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(time, stl_signal$time.series[,2],type = "l")
points(time, seasonal_analysis$time_series$trend, type= "l", col = "green3")
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)^2
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(time, stl_signal$time.series[,2],type = "l")
points(time, seasonal_analysis$time_series$trend, type= "l", col = "green3")
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
seasonal = 1*cos(time * 2 * pi)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 5)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(time, stl_signal$time.series[,2],type = "l")
points(time, seasonal_analysis$time_series$trend, type= "l", col = "green3")
head(par$time_num)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
source("Scripts/00_setup.R")
load(paste0(IO$output_clue,"pop_indicators.Rdata"), verbose =  TRUE)
agg_col_combinations = unique(pop_indicators[,par$agg_col])
for(i in 1:ncol(agg_col_combinations)){
agg_col_combinations[,i] = as.character(agg_col_combinations[,i])
}
i = 1
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
length(i_cond)
length(i_cond)>0
this_pop_indicators = pop_indicators[i_cond,]
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = par$time_num, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
head(this_pop_indicators$daily_fertility)
plot(this_pop_indicators$daily_fertility)
plot(this_pop_indicators$n_users)
plot(this_pop_indicators$n_users, type = "l")
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = par$time_num, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
length(time)
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
tail(time)
max(par$time_num) - min(par$time_num)
3 - dt
3 - par$dt
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
i =2
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
seasonal_analysis
}
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
i = 3
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
seasonal_analysis
i
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
length(i_cond)
cat(agg_col_combinations[i,],"\n")
cat(paste(agg_col_combinations[i,]),"\n")
for(i in 1:nrow(agg_col_combinations)){
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
}
for(i in 1:nrow(agg_col_combinations)){
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
}
i = 4
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
i = 5
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
i = i+1
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
i = i+1
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
i = i+1
cat(paste(agg_col_combinations[i,]),"\n")
cond = rep(TRUE, nrow(pop_indicators))
for(agg_col in par$agg_col){
eval(parse(text = paste0("cond = cond & (pop_indicators$",agg_col," == agg_col_combinations$",agg_col,"[i])")))
}
i_cond = which(cond)
if(length(i_cond)>0){
cat("doing the analysis \n")
this_pop_indicators = pop_indicators[i_cond,]
valid_times = which(this_pop_indicators$n_users > 0)
this_pop_indicators = this_pop_indicators[valid_times, ]
time = this_pop_indicators$time_num
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
# daily fertility
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
}
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
head(time)
tail(time)
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
time = this_pop_indicators$time_num
signal = this_pop_indicators$daily_fertility
dt = unique(round(diff(time), digits = 6))
dt
if(length(dt)>1){stop("time vector is irregular \n")}
if(length(time) != length(signal)){stop("time and signal vectors are of different length\n")}
if((max(time)-min(time))<(3-1.5*dt)){stop("need at least 3 years of data \n")}
trend = smooth.spline(signal, df = 2*max(time)-1)$y
max(time) - min(time)
round(max(time) - min(time))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
trend = smooth.spline(signal, df = 2*n_years-1)$y
n_years = round(max(time) - min(time))
2*n_years-1
trend = smooth.spline(signal, df = 2*n_years-1)$y
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
seasonal_analysis
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
seasonal_analysis
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$daily_fertility, title = "daily fertility")
seasonal_analysis
seasonal_analysis = detect_seasonal_pattern(
time = time, signal = this_pop_indicators$fertility, title = "fertility")
seasonal_analysis
