values_fill = 0) %>%
select(-SampleID) %>% as.matrix(),
family = "multinomial")
glmnet_model$lambda
glmnet_model = glmnet(x = input[j,],
y = output[j,] %>% select(SampleID, output) %>%
mutate(dummy = 1) %>%
pivot_wider(id_cols = SampleID,
values_from = dummy,
names_from = output,
values_fill = 0) %>%
select(-SampleID) %>% as.matrix(),
family = "multinomial")
pred = predict(glmnet_model,
newx = input[j,],
s = 0.105932927,
type = "response")
this_input = input[j,]
this_output = output[j,] %>%
select(SampleID, output) %>%
mutate(dummy = 1) %>%
pivot_wider(id_cols = SampleID,
values_from = dummy,
names_from = output,
values_fill = 0) %>%
select(-SampleID) %>% as.matrix()
glmnet_model = glmnet(x = this_input,
y = this_output,
family = "multinomial")
this_input = input[j,]
this_output = output[j,] %>%
select(SampleID, output) %>%
mutate(dummy = 1) %>%
pivot_wider(id_cols = SampleID,
values_from = dummy,
names_from = output,
values_fill = 0) %>%
select(-SampleID) %>% as.matrix()
glmnet_model = glmnet(x = this_input,
y = this_output,
family = "multinomial")
pred = predict(glmnet_model,
newx = this_input,
s = 0.105932927,
type = "response")
res_pred = pred %>%
as.data.frame() %>%
mutate(SampleID = this_output$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
this_output %>% pivot_longer(cols = -SampleID,
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
pred %>%
as.data.frame() %>%
mutate(SampleID = this_output$SampleID)
pred = predict(glmnet_model,
newx = this_input,
s = 0.105932927,
type = "response")
pred = pred[,,1]
pred %>%
as.data.frame() %>%
mutate(SampleID = this_output$SampleID)
this_output$SampleID
pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID)
pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
output[j,] %>% pivot_longer(cols = -SampleID,
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output")
this_output
this_output %>% pivot_longer(cols = everything(),
values_to = "y",
names_to = "output")
this_output %>% as.data.frame() %>%
pivot_longer(cols = everything(),
values_to = "y",
names_to = "output")
pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
this_output %>% as.data.frame() %>%
pivot_longer(cols = everything(),
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
this_output %>% as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID,
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
res_pred = pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
this_output %>% as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID,
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
ggplot(res_pred, aes(x = y %>% factor(), y = yhat, fill = output)) +
geom_boxplot() + facet_grid(. ~ output) + guides(fill = FALSE)
glm_dfmat = glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(output)[-1]) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
ggplot(glm_dfmat,
aes(x = lambda, y = nb_of_non_zero_feature, col = output))+
geom_line()
i_betas = glm_dfmat %>% filter(nb_of_non_zero_feature >= 10) %>%
group_by(output) %>%
summarize(index = min(lambda)+1, .groups = "drop")
coefs = purrr::map_dfr(
.x = i_betas$output,
.f = function(o){
beta_outout = glmnet_model$beta[[o]][,i_betas$index[i_betas$output == o]]
beta_outout = beta_outout[beta_outout!=0]
or = order(abs(beta_outout), decreasing = TRUE)
data.frame(output = o, metabolite = names(beta_outout[or]), beta = as.vector(beta_outout[or]))
}
)
i_betas$output
o = "iners_recovering"
beta_outout = glmnet_model$beta[[o]][,i_betas$index[i_betas$output == o]]
beta_outout = beta_outout[beta_outout!=0]
beta_outout
glmnet_model$beta[[o]]
glmnet_model$beta
glmnet_model$beta %>% names()
o
glm_dfmat = glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(output)[-1]) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
rm(glm_dfmat)
rm(i_betas)
glmnet_model$dfmat
glm_dfmat = glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(output)[-1]) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
colnames(this_output)
glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(this_output)) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
glm_dfmat = glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(this_output)) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
ggplot(glm_dfmat,
aes(x = lambda, y = nb_of_non_zero_feature, col = output))+
geom_line()
i_betas = glm_dfmat %>% filter(nb_of_non_zero_feature >= 10) %>%
group_by(output) %>%
summarize(index = min(lambda)+1, .groups = "drop")
i_betas
glm_dfmat %>% filter(nb_of_non_zero_feature >= 10) %>%
group_by(output)
glm_dfmat %>%
group_by(output) %>%
filter(nb_of_non_zero_feature >= 10)
i_betas = glm_dfmat %>%
group_by(output) %>%
filter(nb_of_non_zero_feature >= 10) %>%
summarize(index = min(lambda)+1, .groups = "drop")
i_betas
coefs = purrr::map_dfr(
.x = i_betas$output,
.f = function(o){
beta_outout = glmnet_model$beta[[o]][,i_betas$index[i_betas$output == o]]
beta_outout = beta_outout[beta_outout!=0]
or = order(abs(beta_outout), decreasing = TRUE)
data.frame(output = o, metabolite = names(beta_outout[or]), beta = as.vector(beta_outout[or]))
}
)
coefs = coefs %>%
arrange(output, -abs(beta))
coefs = coefs %>%
mutate(metabolite = factor(metabolite, levels = unique(coefs$metabolite)))
ggplot(coefs, aes(y = metabolite, x = beta, fill = output)) +
geom_vline(xintercept = 0, size = 0.5)+
geom_bar(stat = "identity", orientation = "y") +
scale_y_discrete(limits = rev(levels(coefs$metabolite))) +
facet_grid(. ~ output) +
guides(fill = FALSE)
head(this_input)
dim(this_input[,unique(coefs$metabolite)])
dim(this_input)
this_input[,unique(coefs$metabolite)] %>%
pivot_longer(cols = everything(),
names_to = "metabolite",
values_to = "abundance")
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
pivot_longer(cols = everything(),
names_to = "metabolite",
values_to = "abundance")
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID,
names_to = "metabolite",
values_to = "abundance")
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance")
ggplot(this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance") ,
aes(y = metabolite, x = SampleID, fill = SubjectID, alpha = abundance)
) +
geom_tile() +
scale_alpha(range = c(0,1))+
#scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
mb_of_interest =
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance")
mb_of_interest =
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance")
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = SubjectID, alpha = abundance)
) +
geom_tile() +
scale_alpha(range = c(0,1))+
#scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_violin() +
facet_grid(metabolite ~ .)
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_violin() +
facet_grid(. ~ metabolite)
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_boxplot() +
facet_grid(. ~ metabolite)
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_boxplot() +
facet_grid(metabolite ~ ., scale = "free")
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_boxplot() +
facet_wrap(metabolite ~ ., scale = "free")
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = SubjectID, alpha = abundance)
) +
geom_tile() +
scale_alpha(range = c(0,1))+
#scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest, aes(x = output, y = abundance, fill = output)) +
geom_boxplot() +
facet_wrap(metabolite ~ ., scale = "free")
range(mb_of_interest$abundance)
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = SubjectID, alpha = abundance)
) +
geom_tile() +
scale_alpha(range = c(0,1), limits = c(11,23))+
#scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue3", limits = c(11, 23)) +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
# scale_fill_gradient(low = "white", high = "steelblue3", limits = c(11, 23)) +
scale_fill_gradient2(low = "red", mid = "gray80", high = "steelblue3",
midpoint = 17.5) +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
# scale_fill_gradient(low = "white", high = "steelblue3", limits = c(11, 23)) +
scale_fill_gradient2(low = "red", mid = "white", high = "steelblue3",
midpoint = 17.5) +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue3", limits = c(11, 23)) +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
output$sample_class %>% unique()
output$output %>% unique()
j = which(output$sample_class %in% c("limbo","iners_recovering"))
j
this_input = input[j,]
this_output = output[j,] %>%
select(SampleID, output) %>%
mutate(dummy = 1) %>%
pivot_wider(id_cols = SampleID,
values_from = dummy,
names_from = output,
values_fill = 0) %>%
select(-SampleID) %>% as.matrix()
this_input
this_output
this_output %>% colSums()
glmnet_model = glmnet(x = this_input,
y = this_output,
family = "multinomial")
pred = predict(glmnet_model,
newx = this_input,
s = 0.105932927,
type = "response")
pred = pred[,,1]
res_pred = pred %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID, values_to = "yhat", names_to = "output") %>%
left_join(.,
this_output %>% as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID) %>%
pivot_longer(cols = -SampleID,
values_to = "y",
names_to = "output"),
by = c("SampleID", "output")) %>%
arrange(output, -yhat)
ggplot(res_pred, aes(x = y %>% factor(), y = yhat, fill = output)) +
geom_boxplot() + facet_grid(. ~ output) + guides(fill = FALSE)
glm_dfmat = glmnet_model$dfmat %>%
as.data.frame() %>%
mutate(output = colnames(this_output)) %>%
pivot_longer(cols = starts_with("s"), values_to = "nb_of_non_zero_feature", names_to = "lambda", names_prefix = "s") %>%
mutate(lambda = as.integer(lambda))
ggplot(glm_dfmat,
aes(x = lambda, y = nb_of_non_zero_feature, col = output))+
geom_line()
i_betas = glm_dfmat %>%
group_by(output) %>%
filter(nb_of_non_zero_feature >= 10) %>%
summarize(index = min(lambda)+1, .groups = "drop")
coefs = purrr::map_dfr(
.x = i_betas$output,
.f = function(o){
beta_outout = glmnet_model$beta[[o]][,i_betas$index[i_betas$output == o]]
beta_outout = beta_outout[beta_outout!=0]
or = order(abs(beta_outout), decreasing = TRUE)
data.frame(output = o, metabolite = names(beta_outout[or]), beta = as.vector(beta_outout[or]))
}
)
coefs = coefs %>%
arrange(output, -abs(beta))
coefs = coefs %>%
mutate(metabolite = factor(metabolite, levels = unique(coefs$metabolite)))
ggplot(coefs, aes(y = metabolite, x = beta, fill = output)) +
geom_vline(xintercept = 0, size = 0.5)+
geom_bar(stat = "identity", orientation = "y") +
scale_y_discrete(limits = rev(levels(coefs$metabolite))) +
facet_grid(. ~ output) +
guides(fill = FALSE)
mb_of_interest =
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance")
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = SubjectID, alpha = abundance)
) +
geom_tile() +
scale_alpha(range = c(0,1), limits = c(11,23))+
#scale_fill_gradient(low = "white", high = "steelblue3") +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(mb_of_interest,
aes(y = metabolite, x = SampleID, fill = abundance)
) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue3", limits = c(11, 23)) +
facet_grid(. ~ output , scale = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90),
panel.grid.major.x = element_blank())
ggplot(coefs, aes(y = metabolite, x = beta, fill = output)) +
geom_vline(xintercept = 0, size = 0.5)+
geom_bar(stat = "identity", orientation = "y") +
scale_y_discrete(limits = rev(levels(coefs$metabolite))) +
facet_grid(. ~ output) +
guides(fill = FALSE)
mb_of_interest =
this_input[,unique(coefs$metabolite)] %>%
as.data.frame() %>%
mutate(SampleID = output[j,]$SampleID,
SubjectID = output[j,]$SubjectID,
output = output[j,]$output) %>%
pivot_longer(cols = -c(SampleID, SubjectID, output),
names_to = "metabolite",
values_to = "abundance")
mb_of_interest$metabolite %>% unique()
unique(coefs$metabolite)
setwd("~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code")
setwd("~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code")
load("../Data/outputs/Rdata/sex_models.Rdata")
save(sex_models_df, file = str_c(IO$out_Rdata,"sex_models_df.Rdata"))
source("Scripts/00_setup.R")
save(sex_models_df, file = str_c(IO$out_Rdata,"sex_models_df.Rdata"))
load(file = str_c(IO$out_Rdata,"sex_models.Rdata"), verbose = TRUE)
save(sex_models_df, file = str_c(IO$out_Rdata,"sex_models_df.Rdata"))
save(sex_models, file = str_c(IO$out_Rdata,"sex_models.Rdata"))
length(sex_models)
sex_models[[1]] %>% names()
sex_models[[1]]$model
sex_models[[1]]$model$R
predict_daily_sex_behavior
date_seq = seq(as.Date("2020-01-01"), as.Date("2020-12-31"), by = 1)
df = data.frame(date = date_seq)
df = df %>% mutate(country_area = country_area)
df = augment_with_weekdays_months_and_holidays(df)
country_area = "France"
df = df %>% mutate(country_area = country_area)
df = data.frame(date = date_seq)
df = df %>% mutate(country_area = country_area)
df = augment_with_weekdays_months_and_holidays(df)
source('~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions_birth_param_optim.R')
df = augment_with_weekdays_months_and_holidays(df)
source('~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions_optim_each_model.R')
source('~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions_birth_param_optim.R')
df = augment_with_weekdays_months_and_holidays(df)
source('~/Documents/Work/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = augment_with_weekdays_months_and_holidays(df)
source("Scripts/00_setup.R")
source("Scripts/00_setup.R")
