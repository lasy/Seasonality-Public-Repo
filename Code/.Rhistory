sig.level=0.95,lag1=LAG1)$signif
sigma2 <- var(signal)
# 2. take the average of the power across the observations
power.avg<- apply(current_wt$power,1,mean)
# 3. calculate the modified significance, the power is scaled by the variance and then divided by the significance level
signif.modified <- power.avg/(sigma2*sig_1yr)
power.modified.by.variance<- power.avg/sigma2
plot(x = current_wt$scale, y = signif.modified, type='l',ylim=c(0,2.5),xlab='period (yrs)', ylab='power')
abline(h=1,lty=2)
abline(v = period, lty = 2, col = "green")
period = dt*t
period = dt*7
period
plot(x = current_wt$scale, y = signif.modified, type='l',ylim=c(0,2.5),xlab='period (yrs)', ylab='power')
abline(h=1,lty=2)
abline(v = period, lty = 2, col = "green")
mod.sig<- data.frame(
period=current_wt$period,
scale=current_wt$scale,
mod.sig=signif.modified)
mod.sig<- subset(mod.sig,mod.sig>=1)
sig.period.range<- rep(NA,2)
sig.period.range
nrow(mod.sig)>0
sig.period.range<- round(range(mod.sig$period),digits=1)
sig.period.range
sig.period.range<- round(range(mod.sig$period),digits=4)
sig.period.range
period
range(mod.sig$period)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
((sig.period.range[1] <= period) & (sig.period.range[2]>= period))
is_periodic<- ((sig.period.range[1] <= period) & (sig.period.range[2]>= period))
is_periodic
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
plot(current_wt, main = paste0(title," - ",ifelse(is_periodic,"","NOT "),"periodic (p = ",period,")"))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
head(time/dt)
head(time/dt %%7)
head(time/dt %/%7)
head((time/dt) %% 7)
head(round(if(seasonal_trend_method == "GAMM"){
df = data.frame(time = time, day_of_year = time %%1, signal = detrended_signal)
mod = mgcv::gamm(signal ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
seasonal_trend = mgcv::predict.gam(mod$gam)
peak = time[which.max(seasonal_trend)]
amplitude = max(seasonal_trend) - min(seasonal_trend)
}))
head(round((time/dt) %% 7))
head(round((time/dt) %% 7), 20)
plot(round((time/dt) %% 7))
plot(round((time/dt) %% 7), type = "l")
unique(diff(round((time/dt) %% 7)))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_week = round((time/dt) %% 7), signal = detrended_signal)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
dt = unique(round(diff(time), digits = 6))
n_years = round(max(time) - min(time))
dt
n_years
trend = smooth.spline(signal, df = 2*n_years-1)$y
detrended_signal = signal - trend
trend
plot(trend)
detrended_signal = signal - trend
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
plot = TRUE
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
has_weekly_pattern
df = data.frame(time = time, day_of_week = round((time/dt) %% 7), y = detrended_signal)
mod = mgcv::gamm(y ~ s(day_of_week, k = 7 ), data = df, method = "REML")
weekly_trend = mgcv::predict.gam(mod$gam)
plot(weekly_trend)
plot(weekly_trend, type = "l")
summary(mod)
mod$lme
weekly_trend = mgcv::predict.gam(mod$gam)
detrended_signal_no_weekly = detrended_signal - weekly_trend
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
plot(detrended_signal_no_weekly)
plot(detrended_signal_no_weekly, type = "\l")
plot(detrended_signal_no_weekly, type = "l")
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
is_seasonal
df = data.frame(time = time, day_of_year = time %%1, y = detrended_signal_no_weekly)
head(df)
plot(df$time, df$y)
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_year = time %%1, y = as.vector(detrended_signal_no_weekly))
cat("here\n")
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/50)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
remainder = signal - trend - weekly_trend - seasonal_trend
par(mfrow = c(3,1), mar = c(0.5,2,2,0.2))
plot(time, signal, type = "l" , main = "signal + trend")
points(time, trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal, type = "l" , main = "detrended signal + weekly trend")
points(time, weekly_trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal_no_weekly, type = "l", main = "detrended signal + seasonal")
points(time, seasonal_trend, type = "l", col = "green3", lwd = 2)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
j = which(seasonal_analysis$time_series$remainder >=0.02)
par$date_seq[j]
par$date_seq[j] - 365
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[(s$indicator == "unprot_sex")]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "prot_sex"]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = TRUE)
source("Scripts/00_setup.R")
install.packages(package, dependencies = TRUE)
source("Scripts/00_setup.R")
install.packages(package, dependencies = TRUE)
source("Scripts/00_setup.R")
source("Scripts/00_setup.R")
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
source("Scripts/00_setup.R")
source("Scripts/00_setup.R")
source("Scripts/00_libraries.R")
source("Scripts/00_variables.R")
source("Scripts/00_functions.R")
source("Scripts/00_init.R")
source("Scripts/00_setup.R")
library(biwavelet)
install.packages("biwavelet")
library(biwavelet)
Sys.info()
install.packages("biwavelet")
library(biwavelet)
source("Scripts/00_setup.R")
library(biwavelet)
source("Scripts/00_setup.R")
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
Sys.info()
Sys.getenv("user")
Sys.getenv()$user
Sys.getenv("LOGNAME")
par$IO_user = Sys.getenv("LOGNAME")
par$IO_user
source("Scripts/00_setup.R")
IO$tmp_kindara
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
g = ggplot(sk1, aes(x = date, y = tot_sex)) + geom_line()
g
s = reshape(sk1, varying = list(4:ncol(sk1)), idvar = c("date","n_cycles","n_obs"), direction = "long")
s$time = colnames(sk1)[4:ncol(sk1)][s$time]
colnames(s) = c("date","n_cycles","n_obs","indicator","value")
g = ggplot(s[grep("sex",s$indicator),], aes(x = date, y = value/n_cycles, col = indicator))
g + geom_line() + ggtitle("Sexual frequency (#/number of cycles)")
head(s)
head(s[grep("sex",s$indicator),])
g = ggplot(s[grep("sex",s$indicator),], aes(x = date, y = value/n_cycles, col = indicator))
g + geom_line() + ggtitle("Sexual frequency (#/number of cycles)")
install.packages("digest")
library(digest)
install.packages("digest")
source("Scripts/00_setup.R")
df = data.frame(x = 1:10, y = rnorm(10))
df
ggplot(df, aes(x = x, y = y)) + geom_point()
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
g = ggplot(sk1, aes(x = date, y = tot_sex)) + geom_line()
g
s = reshape(sk1, varying = list(4:ncol(sk1)), idvar = c("date","n_cycles","n_obs"), direction = "long")
s$time = colnames(sk1)[4:ncol(sk1)][s$time]
colnames(s) = c("date","n_cycles","n_obs","indicator","value")
g = ggplot(s[grep("sex",s$indicator),], aes(x = date, y = value/n_cycles, col = indicator))
g + geom_line()
head(s)
s$n_indicator  = s$value/s$n_obs
s$n_indicator  = s$value/s$n_cycles
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis)
head(seasonal_analysis$time_series)
save(seasonal_analysis, file = paste0(IO$tmp_kindara, "seasonal_analysis_tot_sex.Rdata"))
source("Scripts/00_setup.R")
load(file = paste0(IO$tmp_kindara, "seasonal_analysis_tot_sex.Rdata"), verbose = TRUE)
birth = read.csv(paste0(IO$public_birth_records,"UNdata_Export_20180713_023958101_all.csv"), header = TRUE)
birth
birth = read.csv(paste0(IO$public_birth_records,"UNdata_Export_20180713_023958101_all.csv"), header = TRUE)
# removing the rows with the total number of birth - only keeping the monthly data
months = format(ISOdate(2004,1:12,1),"%B")
j = birth$Month %in% months
birth = birth[which(j),]
rm(j)
# proper date
birth$date = as.Date(paste0(birth$Year, "-",birth$Month,"-01"), format = c("%Y-%B-%d"))
range(birth$date)
# matching country names with countriesLow Names
birth$Country.or.Area = gsub("United States of America","United States", birth$Country.or.Area)
# getting geo-location
mat = match(birth$Country.or.Area, countriesLow$NAME)
countriesLow
install.packages('rworldmap')
library(rworldmap)
mat = match(birth$Country.or.Area, countriesLow$NAME)
birth$lat = countriesLow$LAT[mat]
birth$lon = countriesLow$LON[mat]
rm(mat)
# sorting countries by latitude
countries.levels = unique(birth$Country.or.Area)
m = match(countries.levels,countriesLow$NAME )
lat = countriesLow$LAT[m]
o = order(lat, decreasing = TRUE)
countries.levels = countries.levels[o]
birth$Country.or.Area = factor(birth$Country.or.Area, levels = countries.levels)
head(birth)
save(birth, file = paste0(IO$out_Rdata,"UN_birth_data.Rdata"))
load(file = paste0(IO$out_Rdata,"UN_birth_data.Rdata"), verbose = TRUE)
head(seasonal_analysis$time_series)
input = data.frame(time = seasonal_analysis$time_series$time,
sex = seasonal_analysis$time_series$seasonal_trend + seasonal_analysis$time_series$remainder)
ggplot(input, aes(x = time, y = sex)) + geom_line()
load(paste0(IO$tmp_kindara, "sk1.Rdata"), verbose = TRUE)
sk1
par$date_seq
head(par$date_seq - 365)
seasonal_analysis$time_series$date = par$date_seq - 365
save(seasonal_analysis, file = paste0(IO$tmp_kindara, "seasonal_analysis_tot_sex.Rdata"))
input_daily = data.frame(time = seasonal_analysis$time_series$time,
sex = seasonal_analysis$time_series$seasonal_trend + seasonal_analysis$time_series$remainder)
ggplot(input_daily, aes(x = time, y = sex)) + geom_line()
input_daily = data.frame(time = seasonal_analysis$time_series$time,
date = seasonal_analysis$time_series$date ,
sex = seasonal_analysis$time_series$seasonal_trend + seasonal_analysis$time_series$remainder)
ggplot(input_daily, aes(x = time, y = sex)) + geom_line()
head(month(input_daily$date))
table(month(input_daily$date))
table(round_date(input_daily$date, unit = "month"))
?round_date
table(floor_date(input_daily$date, unit = "month"))
input_daily$date_m = floor_date(input_daily$date, unit = "month")
agg = aggregate(sex ~ date_m,input_daily, sum)
head(agg)
input_monthly = aggregate(sex ~ date_m,input_daily, sum)
ggplot(input_monthly, aes(x = date_m, y = sex)) + geom_line()
ggplot(input_monthly, aes(x = date_m, y = sex)) + geom_line() + geom_hline(yintercept = 0, linetype = 2)
input_monthly$time = year(input_monthly$date_m) + (month(input_monthly)-1)/12
input_monthly$time = year(input_monthly$date_m) + (month(input_monthly$date_m)-1)/12
table(input_monthly$time)
input_monthly$time
ggplot(input_monthly, aes(x = time, y = sex)) + geom_line() + geom_hline(yintercept = 0, linetype = 2)
ggplot(input_monthly, aes(x = date_m, y = sex)) + geom_line() + geom_hline(yintercept = 0, linetype = 2)
ggplot(input_monthly, aes(x = time, y = sex)) + geom_line() + geom_hline(yintercept = 0, linetype = 2)
head(input_monthly)
load(file = paste0(IO$out_Rdata,"UN_birth_data.Rdata"), verbose = TRUE)
head(birth)
unique(birth$Country.or.Area)
j = which((birth$Country.or.Area == "United States") & (birth$date %in% input_monthly$date_m))
j
birth[j,]
ggplot(birth[j,], aes(x = date, y = Value))
ggplot(birth[j,], aes(x = date, y = Value)) + geom_line()
LB = birth[j,]
ggplot(LB , aes(x = date, y = Value)) + geom_line()
LB$relative_value = LB$Value / mean(LB$Value)
ggplot(LB , aes(x = date, y = Value)) + geom_line() + expand_limits(y = 0)
ggplot(LB , aes(x = date, y = relative_value)) + geom_line()
LB$relative_value = LB$Value - mean(LB$Value)
ggplot(LB , aes(x = date, y = relative_value)) + geom_line()
date = intersect(input_monthly$date_m, LB$date)
date
date = unique(c(input_monthly$date_m, LB$date))
date = date[which((date %in% input_monthly$date_m)&(date %in% LB$date))]
date
input = merge(input_monthly, LB, by.x = date_m, by.y = date, all = FALSE)
input = merge(x= input_monthly, y = LB, by.x = "date_m", by.y = "date", all = FALSE)
dim(input)
dim(LB)
dim(input_monthly)
head(input_monthly)
colnames()
colnames(LB)
input = merge(
x= input_monthly[,c("date_m","time","sex")],
y = LB[,c("date","relative_value","Country.or.Area")],
by.x = "date_m", by.y = "date", all = FALSE)
Country.or.Area
input
input$n_sex = input$sex/max(input$sex)
var(input$sex)
max(input$sex)
sqrt(var(input$sex))
input$n_sex = input$sex/var(input$sex)
LB$rel_LB = LB$Value - mean(LB$Value)
input = merge(
x= input_monthly[,c("date_m","time","sex")],
y = LB[,c("date","rel_LB","Country.or.Area")],
by.x = "date_m", by.y = "date", all = FALSE)
input$sex_n = input$sex/var(input$sex)
input$rel_LB_n = input$rel_LB/var(input$rel_LB)
head(input)
input = merge(
x = LB[,c("date","rel_LB","Country.or.Area")],
y = input_monthly[,c("date_m","time","sex")],
by.x = "date", by.y = "date_m", all = FALSE)
# normalizing so that they have similar variance
input$sex_n = input$sex/var(input$sex)
input$rel_LB_n = input$rel_LB/var(input$rel_LB)
# normalizing so that they have similar variance
input$sex_n = input$sex/var(input$sex)
input$rel_LB_n = input$rel_LB/var(input$rel_LB)
ggplot(input, aes(x = date, y = sex_n))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
input$sex_n = input$sex/var(input$sex)
input$rel_LB_n = input$rel_LB/var(input$rel_LB)
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
var(input$sex)
range(input$sex)
range(input$rel_LB_n)
input$sex_n = input$sex/sum(range(input$sex))
input$rel_LB_n = input$rel_LB/sum(range(input$rel_LB))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
input = merge(
x = LB[,c("date","rel_LB","Country.or.Area")],
y = input_monthly[,c("date_m","time","sex")],
by.x = "date", by.y = "date_m", all = TRUE)
# normalizing so that they have similar variance
input$sex_n = input$sex/sum(range(input$sex))
input$rel_LB_n = input$rel_LB/sum(range(input$rel_LB))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
dim(input)
# normalizing so that they have similar variance
input$sex_n = input$sex/sum(range(input$sex))
input$rel_LB_n = input$rel_LB/sum(range(input$rel_LB))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
input$sex_n = input$sex/sum(range(input$sex, na.rm = TRUE))
input$rel_LB_n = input$rel_LB/sum(range(input$rel_LB, na.rm = TRUE))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
input$date_time_shifted = input$date %m+% months(9)
head(
input$date_time_shifted)
head(
input$date_time_shifted)
40/4
input$date_time_shifted = input$date + lubridate::weeks(38)
head(
input$date_time_shifted )
input$date_shifted = input$date + lubridate::weeks(38)
input$sex_n_shifted = input$sex_n[match(input$date_shifted,input$date)]
input$sex_n_shifted
match(input$date_shifted,input$date)
38/4
input$date_shifted = input$date + lubridate::month(9)
input$sex_n_shifted = input$sex_n[match(input$date_shifted,input$date)]
input$sex_n_shifted
input$date_shifted = input$date + lubridate::month(9)
input$date_shifted
input$date
input$date_shifted = input$date %m+% lubridate::month(9)
input$date_shifted = input$date %m+% lubridate::months(9)
input$date_shifted = input$date %m+% months(9)
input$sex_n_shifted = input$sex_n[match(input$date_shifted,input$date)]
input$sex_n_shifted
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n_shifted), col = "red")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n_shifted), col = "red")
input$date_shifted = input$date %m-% months(9)
input$sex_n_shifted = input$sex_n[match(input$date_shifted,input$date)]
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n_shifted), col = "red")
ggplot(LB , aes(x = date, y = rel_LB)) + geom_line()
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB), col = "blue")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")
sum(range(input$rel_LB, na.rm = TRUE))
input$sex_n = input$sex/sum(abs(range(input$sex, na.rm = TRUE)))
input$rel_LB_n = input$rel_LB/sum(abs(range(input$rel_LB, na.rm = TRUE)))
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB), col = "blue")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
input$date_shifted = input$date %m-% months(9)
input$sex_n_shifted = input$sex_n[match(input$date_shifted,input$date)]
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n), col = "red")
ggplot(input, aes(x = date))+
geom_line(aes(y = rel_LB_n), col = "blue")+
geom_line(aes(y = sex_n_shifted), col = "red")
