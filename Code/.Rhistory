signal = smooth.spline(signal)$y
time = par$time_num - 1
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(signal)$y
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(signal, df = 100)$y
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = length(signal))$y[(length(signal)+1):(2*length(signal))]
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = length(signal))$y
plot(time, signal, type = "l")
plot(signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = length(signal))$y[(length(signal)+1):(2*length(signal))]
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
length(signal)
length(time)
dt = unique(round(diff(time), digits = 6))
n_years = round(max(time) - min(time))
n_years
if(length(dt)>1){stop("time vector is irregular \n")}
if(length(time) != length(signal)){stop("time and signal vectors are of different length\n")}
if((max(time)-min(time))<(3-1.5*dt)){stop("need at least 3 years of data \n")}
trend = smooth.spline(signal, df = 2*n_years-1)$y
detrended_signal = signal - trend
signal_matrix = as.matrix(cbind(time, signal))
dt = unique(round(diff(time), digits = 6))
LAG1 = arima(signal, order = c(1,0,0))$coef[1]
current_wt = wt(signal_matrix,
dt = dt, dj = 15*dt,
lag1 = LAG1, # pink noise
max.scale = 3,
# max.scale ## maybe look at this parameter if we have more than 3 years of data
sig.test = 1) # we want to run a significance test
sig_1yr <- wt.sig(signal_matrix,
dt=dt,
scale=current_wt$scale,
sig.test=1,
sig.level=0.95,lag1=LAG1)$signif
sigma2 <- var(signal)
# 2. take the average of the power across the observations
power.avg<- apply(current_wt$power,1,mean)
# 3. calculate the modified significance, the power is scaled by the variance and then divided by the significance level
signif.modified <- power.avg/(sigma2*sig_1yr)
power.modified.by.variance<- power.avg/sigma2
plot(x = current_wt$scale, y = signif.modified, type='l',ylim=c(0,2.5),xlab='period (yrs)', ylab='power')
abline(h=1,lty=2)
mod.sig<- data.frame(
period=current_wt$period,
scale=current_wt$scale,
mod.sig=signif.modified)
mod.sig<- subset(mod.sig,mod.sig>=1)
sig.period.range<- rep(NA,2)
if(nrow(mod.sig)>0){
sig.period.range<- round(range(mod.sig$period),digits=1)
is_seasonal<- (1>=sig.period.range[1] & 1<=sig.period.range[2])
}else{is_seasonal<- FALSE}
plot(current_wt, main = paste0(title," - ",ifelse(is_seasonal,"","NOT "),"seasonal"))
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
title = ""
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot)
LAG1 = arima(signal, order = c(1,0,0))$coef[1]
# wavelet analysis
LAG1
signal_matrix = as.matrix(cbind(time, signal))
dt = unique(round(diff(time), digits = 6))
# autocorrelation
LAG1 = arima(signal, order = c(1,0,0))$coef[1]
# wavelet analysis
current_wt = wt(signal_matrix,
dt = dt, dj = 15*dt,
lag1 = LAG1, # pink noise
max.scale = 3,
# max.scale ## maybe look at this parameter if we have more than 3 years of data
sig.test = 1) # we want to run a significance test
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
set.seed(1)
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
#seasonal = 1*cos(time * 2 * pi)
seasonal = 2*rep(lowess(rep(rnorm(365, sd =4),3), f = 1/8)$y[366:730],3)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 4)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(time, stl_signal$time.series[,2],type = "l",col = "blue",
ylim = range(stl_signal$time.series[,2],seasonal_analysis$time_series$trend,trend))
points(time, seasonal_analysis$time_series$trend, type= "l", col = "black")
points(time, trend, type= "l", col = "green3")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$signal, type = "l")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l", col = "green", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l", col = "green")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l", col = "blue", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l", col = "blue")
plot(time, trend, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l")
plot(time, seasonal, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l")
plot(time, remainder, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l")
par(pty="s")
plot(seasonal_analysis$time_series$trend, trend, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
plot(seasonal_analysis$time_series$seasonal_trend, seasonal, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
plot(seasonal_analysis$time_series$remainder, remainder, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
set.seed(2)
# generating 3 years of data
time = seq(0,3 - 1/365, by = 1/365)
#seasonal = 1*cos(time * 2 * pi)
seasonal = 2*rep(lowess(rep(rnorm(365, sd =4),3), f = 1/8)$y[366:730],3)
trend = 10*smooth.spline(rnorm(length(time), sd =4), df = 4)$y
remainder = 2.5*rnorm(length(time))
signal = seasonal+trend+remainder
signal_ts = ts(signal, frequency = 365)
plot(ts(trend, frequency = 365))
plot(signal_ts)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "test")
stl_signal = stl(signal_ts, s.window = "periodic")
plot(stl_signal)
plot(time, stl_signal$time.series[,2],type = "l",col = "blue",
ylim = range(stl_signal$time.series[,2],seasonal_analysis$time_series$trend,trend))
points(time, seasonal_analysis$time_series$trend, type= "l", col = "black")
points(time, trend, type= "l", col = "green3")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$signal, type = "l")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l", col = "green", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l", col = "green")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l", col = "blue", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l", col = "blue")
plot(time, trend, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l")
plot(time, seasonal, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l")
plot(time, remainder, type = "l", col = "green", lwd = 2)
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l")
par(pty="s")
plot(seasonal_analysis$time_series$trend, trend, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
plot(seasonal_analysis$time_series$seasonal_trend, seasonal, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
plot(seasonal_analysis$time_series$remainder, remainder, cex = 0.5, pch = 16)
abline(a = 0, b = 1, col = "green3", lty = 2)
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(signal, df = 365)
plot(time, signal, type = "l")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(signal, df = 365)$y
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$signal, type = "l")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l", col = "green", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l", col = "green")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l", col = "blue", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l", col = "blue")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(signal, df = 365)$y
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(signal, df = 365)$y
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$signal, type = "l")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$trend, type = "l", col = "green", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$detrended_signal, type = "l", col = "green")
points(seasonal_analysis$time_series$time, seasonal_analysis$time_series$seasonal_trend, type = "l", col = "blue", lwd = 2)
plot(seasonal_analysis$time_series$time, seasonal_analysis$time_series$remainder, type = "l", col = "blue")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[(s$indicator == "unprot_sex")]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara")
signal = s$n_indicator[s$indicator == "prot_sex"]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(signal, df = 365)$y
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
unsmoothed_signal = signal
signal = smooth.spline(signal, df = 365)$y
plot(time, unsmoothed_signal, type = "l")
points(time, signal, type = "l", lwd = 2, col = "blue")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = smooth.spline(unsmoothed_signal, df = 20)$y
plot(time, unsmoothed_signal, type = "l")
points(time, signal, type = "l", lwd = 2, col = "blue")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
unsmoothed_signal = signal
#signal = smooth.spline(rep(signal,3), df = 3*length(signal))$y[(length(signal)+1):(2*length(signal))]
signal = smooth.spline(unsmoothed_signal, df = 100)$y
plot(time, unsmoothed_signal, type = "l")
points(time, signal, type = "l", lwd = 2, col = "blue")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
365/7
1/dt
dt*7
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
3<=3
3<=5
3<=1
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal
wavelet_analysis(time = time, signal = signal, period = 7/365)
wavelet_analysis(time = time, signal = unsmoothed_signal, period = 7/365)
7/365
signal = s$n_indicator[s$indicator == "tot_sex"]
signal_matrix = as.matrix(cbind(time, signal))
dt = unique(round(diff(time), digits = 6))
dt
LAG1 = arima(signal, order = c(1,0,0))$coef[1]
LAG1
current_wt = wt(signal_matrix,
dt = dt, dj = 15*dt,
lag1 = LAG1, # pink noise
max.scale = 3,
# max.scale ## maybe look at this parameter if we have more than 3 years of data
sig.test = 1) # we want to run a significance test
sig_1yr <- wt.sig(signal_matrix,
dt=dt,
scale=current_wt$scale,
sig.test=1,
sig.level=0.95,lag1=LAG1)$signif
sigma2 <- var(signal)
# 2. take the average of the power across the observations
power.avg<- apply(current_wt$power,1,mean)
# 3. calculate the modified significance, the power is scaled by the variance and then divided by the significance level
signif.modified <- power.avg/(sigma2*sig_1yr)
power.modified.by.variance<- power.avg/sigma2
plot(x = current_wt$scale, y = signif.modified, type='l',ylim=c(0,2.5),xlab='period (yrs)', ylab='power')
abline(h=1,lty=2)
abline(v = period, lty = 2, col = "green")
period = dt*t
period = dt*7
period
plot(x = current_wt$scale, y = signif.modified, type='l',ylim=c(0,2.5),xlab='period (yrs)', ylab='power')
abline(h=1,lty=2)
abline(v = period, lty = 2, col = "green")
mod.sig<- data.frame(
period=current_wt$period,
scale=current_wt$scale,
mod.sig=signif.modified)
mod.sig<- subset(mod.sig,mod.sig>=1)
sig.period.range<- rep(NA,2)
sig.period.range
nrow(mod.sig)>0
sig.period.range<- round(range(mod.sig$period),digits=1)
sig.period.range
sig.period.range<- round(range(mod.sig$period),digits=4)
sig.period.range
period
range(mod.sig$period)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
((sig.period.range[1] <= period) & (sig.period.range[2]>= period))
is_periodic<- ((sig.period.range[1] <= period) & (sig.period.range[2]>= period))
is_periodic
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
plot(current_wt, main = paste0(title," - ",ifelse(is_periodic,"","NOT "),"periodic (p = ",period,")"))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
head(time/dt)
head(time/dt %%7)
head(time/dt %/%7)
head((time/dt) %% 7)
head(round(if(seasonal_trend_method == "GAMM"){
df = data.frame(time = time, day_of_year = time %%1, signal = detrended_signal)
mod = mgcv::gamm(signal ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
seasonal_trend = mgcv::predict.gam(mod$gam)
peak = time[which.max(seasonal_trend)]
amplitude = max(seasonal_trend) - min(seasonal_trend)
}))
head(round((time/dt) %% 7))
head(round((time/dt) %% 7), 20)
plot(round((time/dt) %% 7))
plot(round((time/dt) %% 7), type = "l")
unique(diff(round((time/dt) %% 7)))
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_week = round((time/dt) %% 7), signal = detrended_signal)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara")
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
dt = unique(round(diff(time), digits = 6))
n_years = round(max(time) - min(time))
dt
n_years
trend = smooth.spline(signal, df = 2*n_years-1)$y
detrended_signal = signal - trend
trend
plot(trend)
detrended_signal = signal - trend
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
plot = TRUE
has_weekly_pattern = wavelet_analysis(time = time, signal = detrended_signal, title = title, plot = plot, period = dt*7)
has_weekly_pattern
df = data.frame(time = time, day_of_week = round((time/dt) %% 7), y = detrended_signal)
mod = mgcv::gamm(y ~ s(day_of_week, k = 7 ), data = df, method = "REML")
weekly_trend = mgcv::predict.gam(mod$gam)
plot(weekly_trend)
plot(weekly_trend, type = "l")
summary(mod)
mod$lme
weekly_trend = mgcv::predict.gam(mod$gam)
detrended_signal_no_weekly = detrended_signal - weekly_trend
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
plot(detrended_signal_no_weekly)
plot(detrended_signal_no_weekly, type = "\l")
plot(detrended_signal_no_weekly, type = "l")
is_seasonal = wavelet_analysis(time = time, signal = detrended_signal_no_weekly, title = title, plot = plot, period = 1)
is_seasonal
df = data.frame(time = time, day_of_year = time %%1, y = detrended_signal_no_weekly)
head(df)
plot(df$time, df$y)
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
df = data.frame(time = time, day_of_year = time %%1, y = as.vector(detrended_signal_no_weekly))
cat("here\n")
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/10)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
mod = mgcv::gamm(y ~ s(day_of_year, bs='cc', k = floor(1/dt/50)) , data = df, method = "REML")
cat("here\n")
seasonal_trend = mgcv::predict.gam(mod$gam)
plot(seasonal_trend, type = "l")
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
remainder = signal - trend - weekly_trend - seasonal_trend
par(mfrow = c(3,1), mar = c(0.5,2,2,0.2))
plot(time, signal, type = "l" , main = "signal + trend")
points(time, trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal, type = "l" , main = "detrended signal + weekly trend")
points(time, weekly_trend, type = "l", col = "green3", lwd = 2)
plot(time, detrended_signal_no_weekly, type = "l", main = "detrended signal + seasonal")
points(time, seasonal_trend, type = "l", col = "green3", lwd = 2)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
signal = s$n_indicator[s$indicator == "tot_sex"]
time = par$time_num - 1
plot(time, signal, type = "l")
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
head(seasonal_analysis$time_series)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
j = which(seasonal_analysis$time_series$remainder >=0.02)
par$date_seq[j]
par$date_seq[j] - 365
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
source('~/Google Drive/Ladies & Gentlemen/Papers/Seasonality/Seasonality-Public-Repo/Code/Scripts/00_functions.R')
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "tot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[(s$indicator == "unprot_sex")]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "unprot_sex Kindara", remove_weekly_patterns = TRUE)
signal = s$n_indicator[s$indicator == "prot_sex"]
time = par$time_num
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = FALSE)
seasonal_analysis = detect_seasonal_pattern(time = time, signal = signal, title = "prot_sex Kindara", remove_weekly_patterns = TRUE)
