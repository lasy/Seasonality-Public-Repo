ggtitle(str_c("Births - ",Country_Area))+
facet_grid(area ~ ., scale = "free")
g_birth
# Shifted Birth data (= conceptions)
this_conception_last_2_years = this_birth %>% mutate(date = date - months(8)) %>%
dplyr::filter( date >= min(date_range), date < max(date_range))
g_conception = ggplot(this_conception_last_2_years, aes(x = date, y = births,
col = area,
group = interaction(source, area, reliability)))+
geom_line()+
facet_grid(area ~ ., scale = "free")+
ggtitle("Shifted births (conceptions)")+
scale_x_date(limits = date_range, expand = c(0,0))
g_conception
# Sexual patterns
this_tt = tt %>%   dplyr::filter(country_area == Country_Area, date >= as.Date("2017-07-01"))
this_holidays =  holidays %>%  dplyr::filter(country == Country)
g_typical = ggplot(this_tt, aes(x = date, y = r_sex_country_typical, col = area))+
geom_vline(data = this_holidays, aes(xintercept = date), linetype = 1, col = "gold")+
geom_text(data = this_holidays, aes(x = date, y = Inf, label = date_str),
hjust = 0, nudge_x = 1, vjust = 1, nudge_y = 0, col = "gold3", size = 3, check_overlap = TRUE)+
geom_line()+
ggtitle("Total # of sex; overal + weekly trends removed")+
ylab("Detrended sex")+
facet_grid(area ~ ., scale = "free")+
scale_color_manual(values = c(rep("gray40",1),"coral1","slategray1"))+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))
g_typical
# Monthly aggregate sexual patterns
this_pa = pa %>% dplyr::filter(country_area == Country_Area, BC == "F")
g_sex_monthly = ggplot(this_pa, aes(x =  date, y = detrended_r_unprot, col = area))+
geom_hline(yintercept = 0, col = "gray80")+
geom_line()+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))+
facet_grid(area ~ ., scale = "free")
g_sex_monthly
plotlist = list(g_birth, g_conception, g_typical, g_sex_monthly)
g = plot_grid(plotlist = plotlist, ncol=1, align="v")
print(g)
}
for(Country_Area in unique(tt$country_area)){
Country = unique(tt$country[tt$country_area == Country_Area])
Area = unique(tt$area[tt$country_area == Country_Area])
# Birth data
this_birth = birth %>% dplyr::filter(country == Country, (area == Area) | (area == "Whole country"))
max_date = max(this_birth$date)
if(month(max_date)<6){max_year = year(max_date)-1}else{max_year = year(max_date)}
date_range = c(str_c(max_year - 2,"-07-01"),str_c(max_year,"-07-01")) %>%  as.Date
this_birth_last_2_years = this_birth %>% dplyr::filter( date >= min(date_range), date < max(date_range))
g_birth = ggplot(this_birth_last_2_years, aes(x = date, y = births,
col = area,
group = interaction(source, area, reliability)))+
geom_line()+
scale_x_date(limits = date_range, expand = c(0,0))+
ggtitle(str_c("Births - ",Country_Area))+
facet_grid(area ~ ., scale = "free")
g_birth
# Shifted Birth data (= conceptions)
this_conception_last_2_years = this_birth %>% mutate(date = date - months(8)) %>%
dplyr::filter( date >= min(date_range), date < max(date_range))
g_conception = ggplot(this_conception_last_2_years, aes(x = date, y = births,
col = area,
group = interaction(source, area, reliability)))+
geom_line()+
facet_grid(area ~ ., scale = "free")+
ggtitle("Shifted births (conceptions)")+
scale_x_date(limits = date_range, expand = c(0,0))
g_conception
# Monthly aggregate sexual patterns
this_pa = pa %>% dplyr::filter(country_area == Country_Area, BC == "F")
g_sex_monthly = ggplot(this_pa, aes(x =  date, y = detrended_r_unprot, col = area))+
geom_hline(yintercept = 0, col = "gray80")+
geom_line()+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))+
facet_grid(area ~ ., scale = "free")
g_sex_monthly
# Sexual patterns
this_tt = tt %>%   dplyr::filter(country_area == Country_Area, date >= as.Date("2017-07-01"))
this_holidays =  holidays %>%  dplyr::filter(country == Country)
g_typical = ggplot(this_tt, aes(x = date, y = r_sex_country_typical, col = area))+
geom_vline(data = this_holidays, aes(xintercept = date), linetype = 1, col = "gold")+
geom_text(data = this_holidays, aes(x = date, y = Inf, label = date_str),
hjust = 0, nudge_x = 1, vjust = 1, nudge_y = 0, col = "gold3", size = 3, check_overlap = TRUE)+
geom_line()+
ggtitle("Total # of sex; overal + weekly trends removed")+
ylab("Detrended sex")+
facet_grid(area ~ ., scale = "free")+
scale_color_manual(values = c(rep("gray40",1),"coral1","slategray1"))+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))
g_typical
plotlist = list(g_birth, g_conception, g_sex_monthly, g_typical)
g = plot_grid(plotlist = plotlist, ncol=1, align="v")
print(g)
}
for(Country_Area in unique(tt$country_area)){
Country = unique(tt$country[tt$country_area == Country_Area])
Area = unique(tt$area[tt$country_area == Country_Area])
# Birth data
this_birth = birth %>% dplyr::filter(country == Country, (area == Area) | (area == "Whole country"))
max_date = max(this_birth$date)
if(month(max_date)<6){max_year = year(max_date)-1}else{max_year = year(max_date)}
date_range = c(str_c(max_year - 2,"-07-01"),str_c(max_year,"-07-01")) %>%  as.Date
this_birth_last_2_years = this_birth %>% dplyr::filter( date >= min(date_range), date < max(date_range))
g_birth = ggplot(this_birth_last_2_years, aes(x = date, y = births,
col = area,
group = interaction(source, area, reliability)))+
geom_line()+
scale_x_date(limits = date_range, expand = c(0,0))+
ggtitle(str_c("Births - ",Country_Area))+
facet_grid(area ~ ., scale = "free")
g_birth
# Shifted Birth data (= conceptions)
this_conception_last_2_years = this_birth %>% mutate(date = date - months(8)) %>%
dplyr::filter( date >= min(date_range), date < max(date_range))
g_conception = ggplot(this_conception_last_2_years, aes(x = date, y = births,
col = area,
group = interaction(source, area, reliability)))+
geom_line()+
facet_grid(area ~ ., scale = "free")+
ggtitle("Shifted births (conceptions)")+
scale_x_date(limits = date_range, expand = c(0,0))
g_conception
# Monthly aggregate sexual patterns
this_pa = pa %>% dplyr::filter(country_area == Country_Area, BC == "F")
g_sex_monthly = ggplot(this_pa, aes(x =  date, y = detrended_r_unprot, col = area))+
geom_hline(yintercept = 0, col = "gray80")+
geom_line()+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))+
facet_grid(area ~ ., scale = "free")
g_sex_monthly
# Sexual patterns
this_tt = tt %>%   dplyr::filter(country_area == Country_Area, date >= as.Date("2017-07-01"))
this_holidays =  holidays %>%  dplyr::filter(country == Country)
g_typical = ggplot(this_tt, aes(x = date, y = r_sex_country_typical, col = area))+
geom_vline(data = this_holidays, aes(xintercept = date), linetype = 1, col = "gold")+
geom_text(data = this_holidays, aes(x = date, y = Inf, label = date_str),
hjust = 0, nudge_x = 1, vjust = 1, nudge_y = 0, col = "gold3", size = 3, check_overlap = TRUE)+
geom_line()+
ggtitle("Total # of sex; overal + weekly trends removed")+
ylab("Detrended sex")+
facet_grid(area ~ ., scale = "free")+
scale_color_manual(values = c(rep("gray40",1),"coral1","slategray1"))+
scale_x_date(limits = c(as.Date("2017-06-30"),as.Date("2019-07-01")),expand = c(0,0))
g_typical
plotlist = list(g_birth, g_conception, g_sex_monthly, g_typical)
g = plot_grid(plotlist = plotlist, ncol=1, align="v")
print(g)
}
cycles = read_feather(path = str_c(IO$output_clue, "cycles.feather"))
1085.17/60
tracking_pop_agg = read_feather(path = paste0(indicators_folder, "sex_pop_indicators.feather"))
indicators_folder = paste0(IO$output_clue, "pop_indicators/")
tracking_pop_agg = read_feather(path = paste0(indicators_folder, "sex_pop_indicators.feather"))
dim(tracking_pop_agg)
unique(tracking_pop_agg$BC)
colnames(tracking_pop_agg)
sb = tracking_pop_agg %>%
mutate(r_bleeding = n_bleeding/n_users)
head(sb)
unique(interaction(sb$country_area, sb$BC))
sb = tracking_pop_agg %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(sb$country_area, sb$BC))
sb = tracking_pop_agg %>%
mutate(r_bleeding = n_bleeding/n_users,
category = interaction(sb$country_area, sb$BC))
sb = tracking_pop_agg %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(sb$country_area, sb$BC))
cat = United States - California.F
cat = "United States - California.F"
cat(cat,"\n")
j = which(sb$cat == cat)
j
length(j)
x = sb$r_bleeding[j]
plot(x)
res = seasonal_decomposition_daily_signal(x)
seasonal_decomposition_daily_signal = function(x){
x_o = x
j = max(0,which(is.na(x_o)))
if(j > (length(x_o) - 365)){ # if less than a year of data, we just don't do it
res = data.frame(x = NA, trend = NA, weekly_pattern = NA, seasonal = NA, remainder = NA)[rep(1,length(x_o)),]
return(res)
}
x = x_o[(j+1):length(x_o)]
res = data.frame(x = x)
# overall trend
if(length(x)>= 3*365){ # using stl
x_ts = ts(x, frequency = 365)
x_stl = stl(x_ts, s.window = "periodic")
res$trend = x_stl$time.series[,2] %>%  as.numeric()
tmp_rem = apply(x_stl$time.series[,c(1,3)],1,sum)
}else{ # using loess
t = 1:length(x)
res$trend = predict(loess(x ~ t, span = 1)) %>%  as.numeric()
tmp_rem = x - res$trend
}
# weekly oscillations
x_ts = ts(tmp_rem, frequency = 7)
x_stl = stl(x_ts, s.window = "periodic")
res$weekly_pattern = x_stl$time.series[,1]%>%  as.numeric()
# seasonal trend
if(length(x)>=2*365){
x_ts = ts(apply(x_stl$time.series[,2:3],1,sum), frequency = 365)
x_stl = stl(x_ts, s.window = "periodic")
res$seasonal =  x_stl$time.series[,1]%>%  as.numeric()
}else{
res$seasonal = 0
}
# remainder
res$remainder = res$x - res$trend - res$weekly_pattern - res$seasonal
if(j>0){
res_NAs = NA*res[rep(1,j),]
res = rbind(res_NAs, res)
}
return(res)
}
res = seasonal_decomposition_daily_signal(x)
head(res)
plot(res$weekly_pattern)
plot(res$trend)
plot(res$seasonal)
plot(res$remainder)
plot(res$seasonal)
colnames(res) = paste0("r_bleeding","_",colnames(res))
sb = tracking_pop_agg %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(sb$country_area, sb$BC)) %>%
arrange(cat, date)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat,"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
unique(sb$cat)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
cat = "United States - Northeast.I"
j = which(sb$cat == cat)
j
x = sb$r_bleeding[j]
plot(x)
res = seasonal_decomposition_daily_signal(x)
plot(res$trend)
plot(res$remainder)
plot(res$weekly_pattern)
sb$date %>%  range()
dim(sb)
sb = tracking_pop_agg %>%
dplyr::filter(date >= as.Date("2017-07-01")) %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(sb$country_area, sb$BC)) %>%
arrange(cat, date)
sb = tracking_pop_agg %>%
dplyr::filter(date >= as.Date("2017-07-01")) %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(country_area,BC)) %>%
arrange(cat, date)
dim(sb)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
cat
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
plot(x)
res = seasonal_decomposition_daily_signal(x)
x_o = x
j = max(0,which(is.na(x_o)))
j
j > (length(x_o) - 365)
x = x_o[(j+1):length(x_o)]
length(x)
length(x_0)
length(x_o)
res = data.frame(x = x)
length(x)>= 3*365
t = 1:length(x)
res$trend = predict(loess(x ~ t, span = 1)) %>%  as.numeric()
tmp_rem = x - res$trend
x_ts = ts(tmp_rem, frequency = 7)
x_stl = stl(x_ts, s.window = "periodic")
res$weekly_pattern = x_stl$time.series[,1]%>%  as.numeric()
length(x)>=2*365
x_ts = ts(apply(x_stl$time.series[,2:3],1,sum), frequency = 365)
x_stl = stl(x_ts, s.window = "periodic")
length(x)>2*365
seasonal_decomposition_daily_signal = function(x){
x_o = x
j = max(0,which(is.na(x_o)))
if(j > (length(x_o) - 365)){ # if less than a year of data, we just don't do it
res = data.frame(x = NA, trend = NA, weekly_pattern = NA, seasonal = NA, remainder = NA)[rep(1,length(x_o)),]
return(res)
}
x = x_o[(j+1):length(x_o)]
res = data.frame(x = x)
# overall trend
if(length(x)>= 3*365){ # using stl
x_ts = ts(x, frequency = 365)
x_stl = stl(x_ts, s.window = "periodic")
res$trend = x_stl$time.series[,2] %>%  as.numeric()
tmp_rem = apply(x_stl$time.series[,c(1,3)],1,sum)
}else{ # using loess
t = 1:length(x)
res$trend = predict(loess(x ~ t, span = 1)) %>%  as.numeric()
tmp_rem = x - res$trend
}
# weekly oscillations
x_ts = ts(tmp_rem, frequency = 7)
x_stl = stl(x_ts, s.window = "periodic")
res$weekly_pattern = x_stl$time.series[,1]%>%  as.numeric()
# seasonal trend
if(length(x)>2*365){
x_ts = ts(apply(x_stl$time.series[,2:3],1,sum), frequency = 365)
x_stl = stl(x_ts, s.window = "periodic")
res$seasonal =  x_stl$time.series[,1]%>%  as.numeric()
}else{
res$seasonal = 0
}
# remainder
res$remainder = res$x - res$trend - res$weekly_pattern - res$seasonal
if(j>0){
res_NAs = NA*res[rep(1,j),]
res = rbind(res_NAs, res)
}
return(res)
}
res$seasonal = 0
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
dim(sdb)
dim(sb)
tmp = dplyr::full_join(x = sb,
y = sdb %>% dplyr::select(-r_bleeding),
by = c("cat","date"))
tmp = dplyr::full_join(x = sb,
y = sdb %>% dplyr::select(-r_bleeding_x),
by = c("cat","date"))
dim(tmp = dplyr::full_join(x = sb,
y = sdb %>% dplyr::select(-r_bleeding_x),
by = c("cat","date"))
)
dim(tmp)
head(tmp)
sb = tmp; rm(tmp, sdb)
colnames(sb)
ggplot(sb, aes(x = date, y = r_bleeding_seasonal, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
sb = tracking_pop_agg %>%
dplyr::filter(date >= as.Date("2017-01-01")) %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(country_area,BC)) %>%
arrange(cat, date)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
sb = tracking_pop_agg %>%
dplyr::filter(date >= as.Date("2017-07-01")) %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(country_area,BC)) %>%
arrange(cat, date)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
tmp = dplyr::full_join(x = sb,
y = sdb %>% dplyr::select(-r_bleeding_x),
by = c("cat","date"))
sb = tmp; rm(tmp, sdb)
ggplot(sb, aes(x = date, y = r_bleeding_weekly, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
sb = tracking_pop_agg %>%
dplyr::filter(date >= as.Date("2017-07-01")) %>%
mutate(r_bleeding = n_bleeding/n_users,
cat = interaction(country_area,BC)) %>%
arrange(cat, date)
sdb = foreach(cat = unique(sb$cat),
.combine = rbind) %do%{ #
cat(cat %>% as.character(),"\n")
j = which(sb$cat == cat)
x = sb$r_bleeding[j]
res = seasonal_decomposition_daily_signal(x)
colnames(res) = paste0("r_bleeding","_",colnames(res))
res$cat = cat
res$date = sb$date[j]
return(res)
}
tmp = dplyr::full_join(x = sb,
y = sdb %>% dplyr::select(-r_bleeding_x),
by = c("cat","date"))
sb = tmp; rm(tmp, sdb)
ggplot(sb, aes(x = date, y = r_bleeding_weekly, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
colnames(sb)
ggplot(sb, aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
seq(min(sb$date), by = 1, len = 7)
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 7)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 21)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
?scale_x_date
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 21)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 21)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+geom_point()+
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb,
aes(x = date, y = r_bleeding_remainder, col = BC))+
geom_line()+geom_point()+
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb,
aes(x = date, y = r_bleeding_remainder, col = BC))+
geom_line()+
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb,
aes(x = date, y = r_bleeding_remainder, col = BC))+
geom_line()+
facet_grid(country_area ~ .)
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 21)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+geom_point()+
ggtitle("Weekly Pattern (from time-series decomposition)")
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb %>% dplyr::filter(date %in% seq(min(sb$date), by = 1, len = 21)),
aes(x = date, y = r_bleeding_weekly_pattern, col = BC))+
geom_line()+geom_point()+
ggtitle("Weekly Pattern (from time-series decomposition)")+
scale_x_date(date_labels = "%a %b %d %y")+
facet_grid(country_area ~ .)
ggplot(sb,
aes(x = date, y = r_bleeding_remainder, col = BC))+
geom_line()+
ggtitle("Detrended bleeding pattern (overal trend and weekly trend removed)")+
facet_grid(country_area ~ .)
input_folder = paste0(IO$output_clue,"tracking/")
files = list.files(input_folder)
file = files[1]
cat("\t",file,"\t||")
# tracking
tracking = read_feather(path = paste0(input_folder, file))
tracking$BC = dict$BC$type[match(tracking$birth_control_ud, dict$BC$birth_control)]
tracking =  filter(tracking, BC %in% c("F","I"))
head(tracking)
unique(tracking$type)
unique(tracking$type[tracking$category == "pill"])
unique(tracking$category)
unique(tracking$type[tracking$category == "pill_hbc"])
