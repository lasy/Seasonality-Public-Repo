# geom_text(data = opt_par_df %>%  filter(BC == "all", sex_type == "unprot_sex"),
#           aes(x = Inf, y = Inf, col = model,
#               label = str_c(AIC %>% round(),ifelse(dAIC > 0, str_c("\n+",dAIC %>% round()),""))),
#           hjust = 1, vjust = 1, size = 3, lineheight = 0.75)+
scale_x_continuous(breaks = seq(0,12,by = 3))+
guides(col = FALSE)+
xlab("Calendar months")+ylab("Seasonal trends")+
facet_grid(country_area ~ model, scale = "free_y")+
theme(strip.text.y = element_blank())+
ggtitle("Seasonal trends")
g_st
g_aic = ggplot(opt_par_df %>%  filter(BC == "all", sex_type == "unprot_sex"),
aes(x = model, y = country_area, fill = dAIC))
g_aic = g_aic +
geom_tile()+
scale_fill_gradient(name = "", low = hsv(0.58,0.4,1), high = hsv(0.02,0.9,0.9))+
xlab("")+ylab("")+
#guides(fill = FALSE)+
facet_grid(country_area ~ model, scale = "free")+
ggtitle("Diff. with best AIC")+
theme(axis.text = element_blank(),
strip.text.y = element_blank())
g_aic
g_best_aic = ggplot(opt_par_df %>%  filter(BC == "all", sex_type == "unprot_sex", model == "A"),
aes(x = country_area, y = AIC_best_model))
g_best_aic = g_best_aic +
geom_bar(stat = "identity")+ coord_flip()+
xlab("")+
facet_grid(country_area ~ model, scale = "free")+
theme(axis.text = element_blank(), strip.text.x = element_blank())
g_best_aic
opt_par_df = opt_par_df %>%
mutate(country_area_col = country_area_col %>%  factor(., levels = dict$country_area$country_area_col),
Amplitude = 100*alpha,
age_cat_this_ca = get_age_cat(country_area = country_area))
DF = opt_par_df %>%
filter(model != "A",
sex_type == "unprot_sex",
BC == "all",
age_cat == age_cat_this_ca)
g_F = ggplot(DF, aes(x = Tp, y = Amplitude, col = country_area_col))
g_F = g_F +
geom_segment(aes(xend = Tp, yend = 0, linetype = model))+
geom_point()+
scale_color_identity(guide = "legend",
labels = ca_wrapped_levels,
name = "location" )+
scale_x_continuous(limits = c(0,1),breaks = seq(0,3/4,by = 1/4), labels = c("Jan","Apr","Jul","Oct"))+
ylab("Amplitude (% from mean)")+ xlab("Fertility peak time")+
coord_polar(theta = "x", start = 0)+
ggtitle("Calendar year")
g_F
DF = DF %>%
mutate(
country = str_split_fixed(country_area, " - ",2)[,1],
Tp_seas = (Tp-10/365 - 0.5*(country == "Brazil"))%%1)
g_F_seas = ggplot(DF, aes(x = Tp_seas, y = Amplitude, col = country_area_col))
g_F_seas = g_F_seas +
geom_segment(aes(xend = Tp_seas, yend = 0, linetype = model))+
geom_point()+
scale_color_identity(guide = "legend",
labels = ca_wrapped_levels,
name = "location" )+
scale_y_continuous(position = "right")+
scale_x_continuous(limits = c(0,1),breaks = seq(0,3/4,by = 1/4), labels = c("Winter\nSolstice","Spring\nEquinox","Summer\nSolstice","Autumn\nEquinox"))+
ylab("Amplitude (% from mean)")+ xlab("Fertility peak time")+
coord_polar(theta = "x", start = 0, clip = "off")+
ggtitle("Solar year")
g_F_seas
df_sine_curves = expand.grid(t = seq(0,12,by = 0.1), country_area = DF$country_area)
df_sine_curves = left_join(df_sine_curves,
DF %>%
filter(sex_type == "unprot_sex", BC == "all", model == "C") %>%
select(country_area, country_area_col, country_area_wrapped,  alpha, Amplitude, Tp, Tp_seas) %>%
ungroup(),
by = "country_area")
df_sine_curves = df_sine_curves %>%
mutate(
Fertility_calendar = 100 + Amplitude * cos(t/12*2*pi - Tp*2*pi),
Fertility_solar = 100 + Amplitude * cos(t/12*2*pi - Tp_seas*2*pi)
)
g_fert = ggplot(df_sine_curves, aes(x = t, y = Fertility_calendar, col = country_area_col))+
geom_hline(yintercept = 100, col = "gray75")+
geom_line(size = 0.8)+
scale_color_identity()+
scale_x_continuous(breaks = seq(0,12,by = 3), minor_breaks = 0:12, labels = c("Jan","Apr","Jul","Oct","Jan"))+
xlab("Calendar months")+
ylab("Relative changes in fertility (%)")
g_fert
g_fert_solar = ggplot(df_sine_curves, aes(x = t, y = Fertility_solar, col = country_area_col))+
geom_hline(yintercept = 100, col = "gray75")+
geom_line(size = 0.8)+
scale_color_identity()+
scale_x_continuous(breaks = seq(0,12,by = 3), minor_breaks = 0:12,
labels = c("Winter\nSolstice","Spring\nEquinox","Summer\nSolstice","Autumn\nEquinox","Winter\nSolstice"))+
xlab("Solar time")+
ylab("Relative changes in fertility (%)")
g_fert_solar
g_fert_curves = cowplot::plot_grid(g_fert, g_fert_solar, nrow = 1, ncol = 2)
ggplot(simulated_vs_actual_monthly_birth(
alpha = 0.09, Tp = 0.56, beta = 0.9, G = 262.5, Gsd = 10,
sex_df = this_cat_predicted_sex,
ave_daily_birth_df = this_loc_ave_daily_births,
actual_monthly_birth_df = this_loc_births),
aes(x=  year_month, y = births)) +
geom_line() + geom_line(aes(y = sim_births), col = "red")
fig_4 = ggarrange(
ggarrange(
g_ts,
g_st,
labels = c("a","b","c"),
ncol = 2, nrow = 1,
widths = c(3,1)
),
ggarrange(
g_F + theme(plot.title = element_text(hjust = 0.5), legend.position = "none"),
g_F_seas + theme(plot.title = element_text(hjust = 0.5), axis.title.y = element_blank(), axis.text.y = element_blank()),
ggplot(),
labels = c("e","f",""),
ncol = 3, nrow = 1,
widths = c(1.2,1.8,2), heights = 1
),
nrow = 2, ncol = 1,
heights = c(2,1)
)
fig_4
fig_4_plotlist = list()
ordered_ca = c("Brazil - Central-West","United States - California","Brazil - Northeast","United States - Northeast","France","United Kingdom")
model_colors = c("turquoise3","sienna3","maroon3")
# for each country, we put together the time-series and the seasonal trend
for(ca in ordered_ca){
cat(ca,"\n")
age_cat_this_ca = get_age_cat(country_area = ca)
# time-series
this_ca_births = births %>%
filter(country_area == ca,
age_cat == age_cat_this_ca,
BC == "all",
sex_type == "unprot_sex")
this_ca_opt_par_fd = opt_par_df %>%
filter(country_area == ca, age_cat == age_cat_this_ca, sex_type == "unprot_sex", BC == "all") %>%
mutate(dAIC2 = AIC - min(AIC))
g_ts_ca = ggplot(this_ca_births, aes(x = year_month))
g_ts_ca = g_ts_ca +
geom_line(aes(y = births/1000), size = 0.7)+
geom_line(aes(y = sim_births/1000, col = model))+
geom_text(data = this_ca_opt_par_fd,
aes(x = -Inf, y = Inf, col = model,
label = str_c(
model, " : ",
AIC %>% round()#,
#ifelse(dAIC2 > 0, str_c("\n+",dAIC2 %>% round()),"")
)
),
hjust = 0, vjust = 1, size = 4, lineheight = 0.75, fontface = 2)+
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
scale_x_continuous(breaks = seq(0,2020, by = 5), minor_breaks = 0:2020, expand = expansion(mult = c(0.05, 0))) +
scale_color_manual(values = model_colors)+
facet_grid(model ~ ., labeller = label_both)+
theme(strip.text.y = element_blank())+
guides(col = FALSE)+
xlab("Date")+
ylab("Births [thousands]")+
ggtitle(ca)
# seasonal trend
this_cat_births_STL = births_STL  %>%
filter(country_area == ca,
BC == "all",
sex_type == "unprot_sex")
g_stl_ca = ggplot(this_cat_births_STL, aes(x = month))
g_stl_ca = g_stl_ca +
geom_hline(yintercept = 0, col = "gray80")+
geom_line(aes(y = births_seasonal/1000), col = "black", size = 1)+
geom_line(aes(y = sim_births_seasonal/1000, col = model))+
scale_x_continuous(breaks = seq(0,12,by = 3))+
scale_color_manual(values = model_colors)+
guides(col = FALSE)+
xlab("Calendar months")+ylab("Seasonal trends [thousands]")+
facet_grid(model ~ ., labeller = label_both)+
theme(strip.text.y = element_blank())
g_ca = cowplot::plot_grid(g_ts_ca, g_stl_ca, nrow = 1, rel_widths = c(3,1), align = "h")
fig_4_plotlist[[ca]] = g_ca
}
fig_4_time_series = cowplot::plot_grid(plotlist = fig_4_plotlist, nrow = 3, ncol = 2, labels = letters[1:6])
fig_4_time_series
fig_4_v2 = ggarrange(
fig_4_time_series,
ggarrange(
g_F + theme(plot.title = element_text(hjust = 0.5), legend.position = "none"),
g_F_seas + theme(plot.title = element_text(hjust = 0.5), axis.title.y = element_blank(), axis.text.y = element_blank(),
legend.key.height = unit(22,"pt"), legend.spacing.y = unit(0,"pt")),
g_fert_curves,
labels = c("g","h","i"),
ncol = 3, nrow = 1,
widths = c(1.2,1.8,3), heights = 1
),
nrow = 2, ncol = 1,
heights = c(3,1)
)
fig_4_v2
Figures_path = "../Figures Tables Media/Figures/"
scale = 2
ggsave(plot = fig_1, filename = str_c(Figures_path, "F1.pdf"),
width = 17.5, height = 12, units = "cm", scale = scale)
ggsave(plot = fig_2, filename = str_c(Figures_path, "F2.pdf"),
width = 17.5, height = 10, units = "cm", scale = scale)
ggsave(plot = fig_3, filename = str_c(Figures_path, "F3.pdf"),
width = 8, height = 7, units = "cm", scale = scale)
#ggsave(plot = fig_4, filename = str_c(Figures_path, "F4.pdf"),
#       width = 17.5, height = 13, units = "cm", scale = scale)
ggsave(plot = fig_4_v2, filename = str_c(Figures_path, "F4.pdf"),
width = 17.5, height = 17, units = "cm", scale = scale)
source("Scripts/00_setup.R")
clue_sex_agg = read_feather(path =str_c(IO$out_Rdata,"aggregated_sex_counts_clue_July2017-June2019_incl.feather"))
str(clue_sex_agg)
clue_sex_agg = clue_sex_agg %>%
arrange(country_area, BC, age_cat, sex_type, date)
clue_sex_agg = clue_sex_agg %>%
mutate(cat = interaction(country_area, BC, age_cat, sex_type))
# for each category of users
sex_models =
purrr::map(
.x = unique(clue_sex_agg$cat),
.f = function(category){
cat(category %>%  as.character(),"\n")
# retrieve and augment the data
this_cat_sex_data = clue_sex_agg %>% filter(cat == category)
this_cat_sex_data = augment_with_weekdays_months_and_holidays(
this_cat_sex_data,
verbose = FALSE) # see Scripts/00_functions.R
# the following lines add a fictive reference day to ensure the intercept = 1
# and thus that the coefficients of the models are comparable between categories
ref_day = this_cat_sex_data[1,] %>%
mutate(
weekday_month = factor("ref_day", levels =
levels(this_cat_sex_data$weekday_month)),
weekday_month_x = factor("ref_day", levels =
levels(this_cat_sex_data$weekday_month_x)),
holiday_ID  = factor("normal day", levels =
levels(this_cat_sex_data$holiday_ID)),
x = 1,
n_users = max(this_cat_sex_data$n_users))
this_cat_sex_data = bind_rows(ref_day, this_cat_sex_data)
this_cat_sex_data = this_cat_sex_data %>%
mutate(weight = n_users/max(n_users))
# fit the model without contextual holidays
formula = "x ~ weekday_month + holiday_ID"
glm_sex_behavior_1 = glm(data = this_cat_sex_data,
formula = formula,
family = "gaussian",
weights = weight)
# fit the model with contextual holidays (performs better, see below)
formula = "x ~ weekday_month_x + holiday_ID"
glm_sex_behavior = glm(data = this_cat_sex_data,
formula = formula,
family = "gaussian",
weights = weight)
glm_sex_behavior = reduce_storage_size_of_glm_model(model = glm_sex_behavior)
# results
res = list(country_area = unique(this_cat_sex_data$country_area),
BC = unique(this_cat_sex_data$BC),
age_cat = unique(this_cat_sex_data$age_cat),
sex_type = unique(this_cat_sex_data$sex_type),
model = glm_sex_behavior,
intercept = glm_sex_behavior$coefficients[1],
ssr = sum(glm_sex_behavior$residuals^2),
ssr_not_contextual = sum(glm_sex_behavior_1$residuals^2))
res
}
)
sex_models_df = data.frame(
country_area = sapply(sex_models, "[[","country_area"),
BC = sapply(sex_models, "[[","BC"),
age_cat = sapply(sex_models, "[[","age_cat"),
sex_type = sapply(sex_models, "[[","sex_type"),
SSR = sapply(sex_models, "[[","ssr"),
SSR_not_contextual =  sapply(sex_models, "[[","ssr_not_contextual"),
intercept = sapply(sex_models, "[[","intercept")
)
sex_models_df = sex_models_df %>%
left_join(.,dict$country_area, by = "country_area") %>%
left_join(.,dict$BC, by = "BC")
for(ca in unique(sex_models_df$country_area)){
j = which(sex_models_df$country_area == ca)
sex_models_this_location = list()
for(i in 1:length(j)){sex_models_this_location[[i]] = sex_models[[j[i]]]}
save(sex_models_this_location, file = str_c(IO$out_Rdata,"sex_models_",ca,".Rdata"))
}
save(sex_models_df, file = str_c(IO$out_Rdata,"sex_models_df.Rdata"))
load(str_c(IO$out_Rdata,"birth_data.Rdata"), verbose = TRUE)
official_birth_records = birth %>% dplyr::filter(country_area %in% clue_sex_agg$country_area)
rm(birth)
official_birth_records = official_birth_records %>%
mutate(country_area = factor(country_area, levels = dict$country_area$country_area))
official_birth_records = official_birth_records %>%
left_join(., dict$country_area %>% dplyr::select(country_area, country_area_col), by = "country_area")
ggplot(official_birth_records, aes(x = date, y = births, col = country_area_col))+
geom_line()+
scale_color_identity()+
facet_grid(country_area ~ ., scale = "free_y")+
theme(strip.text.y = element_text(angle = 0, hjust = 0))
official_birth_records = official_birth_records %>%
mutate(births_original_numbers = births,
year_month = year + (month_num-1)/12)
# preparing a data.frame that has the number of day in each month
date_seq = seq(min(official_birth_records$date), max(official_birth_records$date) + days(365), by = 1)
date_seq = data.frame(date = date_seq, year = year(date_seq), month_num = month(date_seq))
date_seq = date_seq %>%  mutate(year_month = year + (month_num-1)/12)
n_days_per_month = date_seq %>% group_by(year_month) %>% dplyr::summarise(n_days = n(), .groups = "drop")
# joining with births table
official_birth_records = left_join(official_birth_records, n_days_per_month, by = "year_month")
# correcting
official_birth_records = official_birth_records %>%
mutate(births = births_original_numbers/n_days*30)
write_feather(official_birth_records, path = str_c(IO$out_Rdata,"official_birth_records.feather"))
average_daily_births_df = foreach(ca = unique(official_birth_records$country_area), .combine = bind_rows) %do%{
this_ca_births = official_birth_records %>%  filter(country_area == ca)
date_seq = seq(min(this_ca_births$date), max(this_ca_births$date) + months(1), by = 1)
date_seq = data.frame(date = date_seq, year = year(date_seq), month_num = month(date_seq))
date_seq = date_seq %>%
mutate(
country_area = ca,
year_month = year + (month_num-1)/12
)
this_ca_ave_daily_births = date_seq %>%
full_join(.,
this_ca_births %>%  select(country_area, date, births),
by = c("country_area","date"))
this_ca_ave_daily_births = this_ca_ave_daily_births %>%
mutate(m_ave_daily_births = births/30)
this_ca_ave_daily_births$m_ave_daily_births[this_ca_ave_daily_births$date == max(date_seq$date)] =
this_ca_ave_daily_births$m_ave_daily_births[this_ca_ave_daily_births$date == max(this_ca_births$date)]
this_ca_ave_daily_births = this_ca_ave_daily_births %>%
mutate(daily_births = na.spline(m_ave_daily_births, method = "natural"),
t = row_number())
this_ca_ave_daily_births$ave_daily_births = predict(loess(daily_births ~ t, data = this_ca_ave_daily_births, span = 0.5))
g = ggplot(this_ca_ave_daily_births, aes(x = date))+
geom_point(aes(y = m_ave_daily_births), col = "black")+
geom_line(aes(y = daily_births), col = "gray")+
geom_line(aes(y = ave_daily_births), col = "blue")+
ggtitle(ca)
print(g)
res = this_ca_ave_daily_births %>% select(country_area, date, ave_daily_births)
return(res)
}
source("Scripts/00_functions_birth_param_optim.R")
official_birth_records = official_birth_records %>%
arrange(country_area, date) %>%
group_by(country_area) %>%
mutate(trend = predict(loess(births ~ year_month, span = 0.6)),
detrended_births = births / trend,
mean_detrended_birth = mean(detrended_births),
centered_detrended_births = detrended_births - mean_detrended_birth)%>%
ungroup()
fourier_transform = official_birth_records %>%
group_by(country_area,year) %>%
mutate(n_months = n()) %>%
filter(n_months == 12) %>%
ungroup() %>%
group_by(country_area) %>%
mutate(ft = fft(centered_detrended_births))
model_B_param_rough_estimates = fourier_transform %>%
group_by(country_area) %>%
mutate(
i = row_number(),
n_tp = n(),
f_index = (n_tp %/% 12) + 1,
amplitude_raw = max(ifelse(i == f_index, abs(ft), 0)),
amplitude = amplitude_raw/n_tp * 2,
angle = max(ifelse(i == f_index, -atan2(Im(ft), Re(ft)), -Inf))  %% (2*pi),
birth_peak = angle / (2*pi),
fertility_peak = (birth_peak + 1/3.5) %% 1)  %>%
ungroup() %>%
select(country_area, amplitude, birth_peak, fertility_peak) %>%  distinct()
source("Scripts/00_functions_optim_each_model.R")
optimize_params_for_each_model = function(location, categories){
cat(location,"\n")
# optimization for model A: needs to be done for each sub-category in that location
cat("\t model A\n")
optimized_params_A =
purrr::map_dfr(
.x = categories$cat[categories$country_area == location],
.f = optimize_params_for_model_A,
categories = categories)
# optimization for model B: only needs to be done once for the location
cat("\t model B\n")
optimized_params_B = optimize_params_for_model_B(location, categories = categories)
# optimization for model C: needs to be done for each sub-category in that location
cat("\t model C\n\t")
optimized_params_C =
purrr::map_dfr(
.x = categories$cat[categories$country_area == location],
.f = optimize_params_for_model_C,
categories = categories,
optimized_params_B = optimized_params_B[1,])
cat("\n\t done\n")
optimized_par_this_loc = bind_rows(optimized_params_A, optimized_params_B, optimized_params_C)
optimized_par_this_loc
}
G_table = read_feather(path = str_c(IO$out_Rdata,"Gestation_par_table.feather"))
categories = clue_sex_agg %>% select(country_area, BC, age_cat, sex_type, cat) %>%  distinct()
location = "US - California"
unique(categories$country_area)
location = "United States - California"
categories$cat[categories$country_area == location]
category = "United States - California.all.all.unprot_sex"
cat("\t",as.character(category))
this_category = categories %>% filter(cat == category)
location = this_category$country_area
bc = this_category$BC
ac = this_category$age_cat
st = this_category$sex_type
this_category
this_loc_ave_daily_births = average_daily_births_df %>% filter(country_area == location)
this_loc_births = official_birth_records %>% filter(country_area == location)
# G: average gestation period for this location
G = G_table$G[G_table$country_area == location] * 7
j = which((sex_models_df$country_area == location) & (sex_models_df$BC == bc) & (sex_models_df$age_cat == ac) & (sex_models_df$sex_type == st))
this_cat_model = sex_models[[j]]$model
this_cat_predicted_sex = predict_daily_sex_behavior(model = this_cat_model,
date_range = range(this_loc_ave_daily_births$date),
country_area = location)
beta = max(this_cat_predicted_sex$sex)-1
# optimization
optimized_params_C = optimize_birth_param(
varying_par = c("alpha", "Tp", "beta"),
varying_par_prior = list(
alpha = rnorm(100, mean = optimized_params_B$alpha, sd = 0.01),
Tp = rnorm(100, mean = optimized_params_B$Tp, sd = 0.05),
beta = runif(100, min = 0.1 , max = 2*beta)
),
fixed_par = list(G = G, Gsd = Gsd0),
n_init = 3,
sex_df = this_cat_predicted_sex,
ave_daily_birth_df = this_loc_ave_daily_births,
actual_monthly_birth_df = this_loc_births, verbose = FALSE)
optimized_params_C = optimized_params_C %>%
mutate(country_area = location, model = "C", BC = bc, age_cat = ac, sex_type = st)
optimized_params_B = optimize_params_for_model_B(location, categories = categories)
optimized_params_B = optimized_params_B[1,]
optimized_params_C = optimize_birth_param(
varying_par = c("alpha", "Tp", "beta"),
varying_par_prior = list(
alpha = rnorm(100, mean = optimized_params_B$alpha, sd = 0.01),
Tp = rnorm(100, mean = optimized_params_B$Tp, sd = 0.05),
beta = runif(100, min = 0.1 , max = 2*beta)
),
fixed_par = list(G = G, Gsd = Gsd0),
n_init = 3,
sex_df = this_cat_predicted_sex,
ave_daily_birth_df = this_loc_ave_daily_births,
actual_monthly_birth_df = this_loc_births, verbose = FALSE)
optimized_params_C = optimized_params_C %>%
mutate(country_area = location, model = "C", BC = bc, age_cat = ac, sex_type = st)
optimized_params_C
residuals_simulated_vs_actual_monthly_birth(par = c(0.0435,0.98244, 0.358, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0435,0.98244, 0.9, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
169606621-154938891
df = simulated_vs_actual_monthly_birth(alpha = 0.0435, Tp = 0.98244, beta = .9, G = 262.5, Gsd = 10, sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
head(df)
ggplot(simulated_vs_actual_monthly_birth(alpha = 0.0435, Tp = 0.98244, beta = .9, G = 262.5, Gsd = 10, sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births),
aes(x = year_month, y = births)) +
geom_line() + geom_line(aes(y = sim_births))
ggplot(simulated_vs_actual_monthly_birth(alpha = 0.0435, Tp = 0.98244, beta = .9, G = 262.5, Gsd = 10, sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births),
aes(x = year_month, y = births)) +
geom_line() + geom_line(aes(y = sim_births), col = "red")
ggplot(simulated_vs_actual_monthly_birth(alpha = 0.0435, Tp = 0.98244, beta = .358, G = 262.5, Gsd = 10, sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births),
aes(x = year_month, y = births)) +
geom_line() + geom_line(aes(y = sim_births), col = "red")
ggplot(simulated_vs_actual_monthly_birth(alpha = 0.0335, Tp = 0.98244, beta = .558, G = 262.5, Gsd = 10, sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births),
aes(x = year_month, y = births)) +
geom_line() + geom_line(aes(y = sim_births), col = "red")
residuals_simulated_vs_actual_monthly_birth(par = c(0.0435,0.98244, 0.358, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.358, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.458, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.558, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.658, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.758, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.0335,0.98244, 0.658, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.03,0.98244, 0.658, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.03,0.98244, 0.7, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.032,0.98244, 0.7, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.031,0.98244, 0.7, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.031,0.98244, 0.72, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
residuals_simulated_vs_actual_monthly_birth(par = c(0.031,0.98244, 0.74, 262.5, 10 ), sex_df = this_cat_predicted_sex, ave_daily_birth_df = this_loc_ave_daily_births, actual_monthly_birth_df = this_loc_births)
optimized_params_B$alpha
optimized_params_C = optimize_birth_param(
varying_par = c("alpha", "Tp", "beta"),
varying_par_prior = list(
alpha = rnorm(100, mean = optimized_params_B$alpha-0.1, sd = 0.01),
Tp = rnorm(100, mean = optimized_params_B$Tp, sd = 0.05),
beta = runif(100, min = 0.1 , max = 2*beta)
),
fixed_par = list(G = G, Gsd = Gsd0),
n_init = 3,
sex_df = this_cat_predicted_sex,
ave_daily_birth_df = this_loc_ave_daily_births,
actual_monthly_birth_df = this_loc_births, verbose = FALSE)
optimized_params_C
optimized_params_C = optimize_birth_param(
varying_par = c("alpha", "Tp", "beta"),
varying_par_prior = list(
alpha = rnorm(100, mean = optimized_params_B$alpha-0.2, sd = 0.01),
Tp = rnorm(100, mean = optimized_params_B$Tp, sd = 0.05),
beta = runif(100, min = 0.1 , max = 2*beta)
),
fixed_par = list(G = G, Gsd = Gsd0),
n_init = 3,
sex_df = this_cat_predicted_sex,
ave_daily_birth_df = this_loc_ave_daily_births,
actual_monthly_birth_df = this_loc_births, verbose = FALSE)
optimized_params_C
